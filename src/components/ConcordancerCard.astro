---
interface Props {
  concordancer: Concordancer;
}
const { concordancer } = Astro.props;
import { languageTag } from "../paraglide/runtime";
const lang = languageTag();
import * as m from "../paraglide/messages";

function getLocalizedForm(
  str: LocalizedString,
  expected: string,
  current: string,
): string {
  if (str[expected]) {
    return str[expected];
  }
  return str[current] ?? str.en ?? "????";
}
---

<div class="card">
  <div class="flex items-center flex-col">
    <a href={concordancer.link}
      >{getLocalizedForm(concordancer.abbr, concordancer.lang, lang)}</a
    >
    <a
      class="author"
      href={concordancer.author.link}
      title={getLocalizedForm(
        concordancer.author.abbr,
        concordancer.lang,
        lang,
      ) === concordancer.author.name.en
        ? concordancer.author.name.en
        : `${getLocalizedForm(concordancer.author.name, concordancer.lang, lang)} (${concordancer.author.name.en})`}
      >{getLocalizedForm(concordancer.author.abbr, concordancer.lang, lang)}</a
    >
    <!-- TODO: If no English names, show firstly the current language name, else show nothing -->
  </div>

  <ul>
    {
      concordancer.corpora.map((corpus) => (
        <li>
          <a href={`/corpora/${corpus.id}`}>
            {getLocalizedForm(corpus.name, corpus.lang, lang)}
          </a>
        </li>
      ))
    }
  </ul>

  <div class="actions">
    <a class="button" href={`/concordancers/${concordancer.id}`}>
      {m.viewDetails()}
    </a>
    <a
      class="button"
      href={concordancer.link}
      target="_blank"
      rel="noopener noreferrer"
    >
      {m.visitSite()}
    </a>
  </div>
</div>

<style>
  .card {
    justify-content: space-between;
    padding: 1rem;

    background-color: #23262d;
    @apply dark:bg-gray-800 bg-slate-100;
    @apply dark:text-gray-100 text-gray-900;

    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);

    display: grid;
    grid-template-columns: 1fr 3fr;
    grid-template-rows: 1fr auto;
    gap: 1rem;
  }

  a {
    text-decoration: none;
  }

  a.author {
    font-size: 0.8rem;
    @apply text-gray-500 dark:text-gray-400;
  }

  a.button {
    @apply py-2 px-4 bg-blue-500 bg-opacity-75 dark:bg-opacity-50 text-white rounded border-blue-500 border-2 text-center;
  }

  .actions {
    grid-column: span 2;
    @apply grid grid-cols-2 gap-4;
  }
</style>
